var currentScene = 0; 
var score = 1;
var numFood = 100;
var gameOver = false;
frameRate(15);
var foodsX = round(random(10,370));
var foodsY = round(random(5,370));
var index = 0;

var bodyJersey = function(x,y,bitmojiHeight){
    fill(64, 3, 232);//dark blue
    triangle(x+108*(bitmojiHeight/150),y+170*(bitmojiHeight/150),x+108*(bitmojiHeight/150),y+105*(bitmojiHeight/150),x+55*(bitmojiHeight/150),y+170*(bitmojiHeight/150));//jersey
    triangle(x+274*(bitmojiHeight/150),y+170*(bitmojiHeight/150),x+222*(bitmojiHeight/150),y+104*(bitmojiHeight/150),x+222*(bitmojiHeight/150),y+170*(bitmojiHeight/150));//jersey
    rect(x+129*(bitmojiHeight/150),y+104*(bitmojiHeight/150),71*(bitmojiHeight/150),66*(bitmojiHeight/150));//jersey

    fill(255, 0, 0);//red
    rect(x+108*(bitmojiHeight/150),y+104*(bitmojiHeight/150),23*(bitmojiHeight/150),66*(bitmojiHeight/150));//jersey
    rect(x+199*(bitmojiHeight/150),y+104*(bitmojiHeight/150),23*(bitmojiHeight/150),66*(bitmojiHeight/150));//jersey

    fill(255,255,255);//white
    stroke(0, 0, 0);
    rect(x+114*(bitmojiHeight/150),y+104*(bitmojiHeight/150),10*(bitmojiHeight/150),65*(bitmojiHeight/150));//stripes
    rect(x+205*(bitmojiHeight/150),y+104*(bitmojiHeight/150),10*(bitmojiHeight/150),65*(bitmojiHeight/150));//stripes


    fill(255, 255, 255);
    noStroke();
    rect(x+137*(bitmojiHeight/150),y+136*(bitmojiHeight/150),8*(bitmojiHeight/150),34*(bitmojiHeight/150));
    arc(x+144*(bitmojiHeight/150),y+153*(bitmojiHeight/150),39*(bitmojiHeight/150),34*(bitmojiHeight/150),-90,90);
    fill(64, 3, 232);
    arc(x+144*(bitmojiHeight/150),y+153*(bitmojiHeight/150),25*(bitmojiHeight/150),20*(bitmojiHeight/150),-90,90);
    fill(255, 255, 255);
    rect(x+168*(bitmojiHeight/150),y+136*(bitmojiHeight/150),8*(bitmojiHeight/150),34*(bitmojiHeight/150));
    rect(x+176*(bitmojiHeight/150),y+136*(bitmojiHeight/150),15*(bitmojiHeight/150),8*(bitmojiHeight/150));
    rect(x+170*(bitmojiHeight/150),y+151*(bitmojiHeight/150),15*(bitmojiHeight/150),8*(bitmojiHeight/150));
};

var faceAndNeck = function(x,y,bitmojiHeight)
{
    fill(245, 213, 213);//skin color 
    triangle(x+138*(bitmojiHeight/150),y+105*(bitmojiHeight/150),x+192*(bitmojiHeight/150),y+105*(bitmojiHeight/150),x+166*(bitmojiHeight/150),y+137*(bitmojiHeight/150));//neck
    ellipse(x+128*(bitmojiHeight/150),y+56*(bitmojiHeight/150),11*(bitmojiHeight/150),19*(bitmojiHeight/150));//left ear
    ellipse(x+202*(bitmojiHeight/150),y+56*(bitmojiHeight/150),11*(bitmojiHeight/150),19*(bitmojiHeight/150));//right ear 
    ellipse(x+165*(bitmojiHeight/150),y+62*(bitmojiHeight/150),74*(bitmojiHeight/150),97*(bitmojiHeight/150));//head
    
    fill(255,255,255);//white
    stroke(0, 0, 0);
    ellipse(x+150*(bitmojiHeight/150),y+51*(bitmojiHeight/150),13*(bitmojiHeight/150),10*(bitmojiHeight/150));//left eye
    ellipse(x+181*(bitmojiHeight/150),y+51*(bitmojiHeight/150),13*(bitmojiHeight/150),10*(bitmojiHeight/150));//right eye

    fill(64, 47, 55);//brown
    ellipse(x+150*(bitmojiHeight/150),y+51*(bitmojiHeight/150),5*(bitmojiHeight/150),5*(bitmojiHeight/150));//left pupil 
    ellipse(x+181*(bitmojiHeight/150),y+51*(bitmojiHeight/150),5*(bitmojiHeight/150),5*(bitmojiHeight/150));//right pupil

    fill(255, 255, 255);
    arc(x+165*(bitmojiHeight/150),y+90*(bitmojiHeight/150),35*(bitmojiHeight/150),26*(bitmojiHeight/150),0*(bitmojiHeight/150),176);//mouth

    fill(245, 213, 213);
    bezier(x+167*(bitmojiHeight/150),y+84*(bitmojiHeight/150),x+198*(bitmojiHeight/150),y+85*(bitmojiHeight/150),x+162*(bitmojiHeight/150),y+70*(bitmojiHeight/150),x+166*(bitmojiHeight/150),y+62*(bitmojiHeight/150));//nose

    fill(0, 0, 0);
    ellipse(x+134*(bitmojiHeight/150),y+38*(bitmojiHeight/150),15*(bitmojiHeight/150),13*(bitmojiHeight/150));//hair
    ellipse(x+197*(bitmojiHeight/150),y+39*(bitmojiHeight/150),15*(bitmojiHeight/150),13*(bitmojiHeight/150));//hair 
    ellipse(x+184*(bitmojiHeight/150),y+37*(bitmojiHeight/150),15*(bitmojiHeight/150),13*(bitmojiHeight/150));//hair 
    ellipse(x+170*(bitmojiHeight/150),y+38*(bitmojiHeight/150),15*(bitmojiHeight/150),13*(bitmojiHeight/150));//hair
    ellipse(x+157*(bitmojiHeight/150),y+37*(bitmojiHeight/150),15*(bitmojiHeight/150),13*(bitmojiHeight/150));//hair
    ellipse(x+143*(bitmojiHeight/150),y+38*(bitmojiHeight/150),15*(bitmojiHeight/150),13*(bitmojiHeight/150));//hair
    
    fill(255,255,255);
    ellipse(x+165*(bitmojiHeight/150),y+12*(bitmojiHeight/150),10*(bitmojiHeight/150),10*(bitmojiHeight/150));//brim
    arc(x+165*(bitmojiHeight/150),y+35*(bitmojiHeight/150),70*(bitmojiHeight/150),49*(bitmojiHeight/150),-180,0*(bitmojiHeight/150));//hat
    ellipse(x+166*(bitmojiHeight/150),y+34*(bitmojiHeight/150),73*(bitmojiHeight/150),10*(bitmojiHeight/150));//top part
};

var drawBitmoji = function(x,y,bitmojiHeight) {
    faceAndNeck(x,y,bitmojiHeight);
    bodyJersey(x,y,bitmojiHeight);
};

var drawAaronBitmoji = function(bitmojiObject) {
    var x = bitmojiObject.x;
    var y = bitmojiObject.y;
    var h = bitmojiObject.h;
    var shirtColor = bitmojiObject.shirtColor;
    var initials = bitmojiObject.initials;

        fill(255, 235, 214);
        ellipse(x + (h / 150 * 100), y + (h / 150 * 100), (h / 150 * 91), (h / 150 * 100)); 
// head
        fill(255, 255, 255);
        fill(184, 128, 88);
        noStroke();
        quad(x + (h / 150 * 52), y + (h / 150 * 90), x + (h / 150 * 63), y + (h / 150 * 68), x + (h / 150 * 87), y + (h / 150 * 47), x + (h / 150 * 75), y + (h / 150 * 83)); 
// hair left
        quad(x + (h / 150 * 151), y + (h / 150 * 81), x + (h / 150 * 141), y + (h / 150 * 66), x + (h / 150 * 109), y + (h / 150 * 47), x + (h / 150 * 142), y + (h / 150 * 92)); 
// hair right
        quad(x + (h / 150 * 136), y + (h / 150 * 67), x + (h / 150 * 111), y + (h / 150 * 48), x + (h / 150 * 83), y + (h / 150 * 49), x + (h / 150 * 74), y + (h / 150 * 83)); 
// hair middle
        bezier(x + (h / 150 * 57), y + (h / 150 * 121), x + (h / 150 * 108), y + (h / 150 * 189), x + (h / 150 * 148), y + (h / 150 * 123), x + (h / 150 * 141), y + (h / 150 * 119));
        fill(0, 0, 0);
        ellipse(x + (h / 150 * 90), y + (h / 150 * 101), (h / 150 * 8), (h / 150 * 7)); 
// left eye
        ellipse(x + (h / 150 * 116), y + (h / 150 * 101), (h / 150 * 8), (h / 150 * 7));
// right eye
        fill(255, 235, 214);
        rect(x + (h / 150 * 110), y + (h / 150 * 89), (h / 150 * 10), (h / 150 * 10));
        stroke(0, 0, 0);
        bezier(x + (h / 150 * 100), y + (h / 150 * 100), x + (h / 150 * 121), y + (h / 150 * 122), x + (h / 150 * 92), y + (h / 150 * 120), x + (h / 150 * 96), y + (h / 150 * 115)); 
// nose
        fill(255, 255, 255);
        arc(x + (h / 150 * 103), y + (h / 150 * 125), (h / 150 * 30), (h / 150 * 13), 1, 180); // mouth
        line(x + (h / 150 * 86), y + (h / 150 * 124), x + (h / 150 * 119), y + (h / 150 * 124));
        fill(0, 0, 0);
        arc(x + (h / 150 * 103), y + (h / 150 * 63), (h / 150 * 67), (h / 150 * 61), 182, 363); 
// hat
        rect(x + (h / 150 * 56), y + (h / 150 * 61), (h / 150 * 80), (h / 150 * 5));

        fill(bitmojiObject.shirtColor);
        quad(x + (h / 150 * 61), y + (h / 150 * 151), x + (h / 150 * 138), y + (h / 150 * 148), x + (h / 150 * 152), y + (h / 150 * 255), x + (h / 150 * 58), y + (h / 150 * 249)); 
        if (bitmojiObject.initials) {
     line(x + (h / 150 * 73), y + (h / 150 * 218), x + (h / 150 * 86), y + (h / 150 * 161)); 
            line(x + (h / 150 * 95), y + (h / 150 * 218), x + (h / 150 * 86), y + (h / 150 * 161));
            line(x + (h / 150 * 69), y + (h / 150 * 195), x + (h / 150 * 104), y + (h / 150 * 194));
        
        fill(bitmojiObject.shirtColor);
        arc(x + (h / 150 * 97), y + (h / 150 * 196), (h / 150 * 58), (h / 150 * 68), -72, 14);
        line(x + (h / 150 * 109), y + (h / 150 * 218), x + (h / 150 * 106), y + (h / 150 * 163));
        line(x + (h / 150 * 140), y + (h / 150 * 218), x + (h / 150 * 106), y + (h / 150 * 188));
        }
};
//Button Class
var Button = function(config) {
    this.x = config.x || 0;
    this.y = config.y || 0;
    this.width = config.width || 150;
    this.height = config.height || 50;
    this.label = config.label || "Click";
    this.onClick = config.onClick || function() {};
};

Button.prototype.draw = function() {
    fill(0, 234, 255);
    rect(this.x, this.y, this.width, this.height, 5);
    fill(0, 0, 0);
    textSize(19);
    textAlign(LEFT, TOP);
    text(this.label, this.x+10, this.y+this.height/4);
};

Button.prototype.isMouseInside = function() {
    return mouseX > this.x &&
           mouseX < (this.x + this.width) &&
           mouseY > this.y &&
           mouseY < (this.y + this.height);
};

Button.prototype.handleMouseClick = function() {
    if (this.isMouseInside()) {
        this.onClick();
    }
};

var startButton = new Button({
    x: 130,
    y: 255,
    label: "START",
    onClick: function() {
        currentScene = 1;
    }
});

var splashScreen = function ()
{
    background(0, 247, 255);
    textSize(60);
    fill(255, 255, 255);
    text("Snake", 112,150);
    textSize(30);
    text("By: Dylan and Aaron",66,320);
    startButton.draw();
    drawBitmoji(-7,19,68);
    drawAaronBitmoji({	
    x:276,
    y:5,
    h:75,
    shirtColor:color(255, 0, 0),
    initials:true
    });
    
};

var Snake = function(x, y) {
    this.x = x;
    this.y = y;
    this.segments = []; // Array to store snake segments
    this.segments.push({ x: x, y: y }); // Add the initial segment
};

Snake.prototype.draw = function() {
    fill(0, 255, 72);
    //Draws the Snake
    noStroke();
    for (var i = 0; i < this.segments.length; i++) {
        ellipse(this.segments[i].x, this.segments[i].y, 20, 20);
    }
};

Snake.prototype.move = function() {
    var newX = this.x;
    var newY = this.y;
    // Move the snake according to the current direction
    if (this.direction === "right") {
        this.x += 10;
    } else if (this.direction === "left") {
        this.x -= 10;
    } else if (this.direction === "up") {
        this.y -= 10;
    } else if (this.direction === "down") {
        this.y += 10;
    }
    // Add a new segment to the beginning of the segments array
    var newSegment = { x: newX, y: newY };
    this.segments.splice(0, 0, newSegment); // Insert newSegment at the beginning of the array

    // Remove the last segment if the snake didn't eat food
    if (!this.ateFood) {
    this.segments.length -= 1; // Remove the last segment from the array
    }
    this.ateFood = false;
    //If the snake goes off the screen, the game ends 
    if(this.x < 5 || this.x > 395 || this.y < 5 || this.y > 395)
    {
        gameOver = true;
    }
    //Tells if the snake touches the tail, if so the game ends 
    for (var i = 1; i < this.segments.length; i++) {
        var segment = this.segments[i];
        if (this.x === segment.x && this.y === segment.y) 
        {
            gameOver = true;
            break; //Ends the loop 
        }
    }
    if (gameOver === true)
    {
        currentScene = 2;
    }
    // Check if the snake hits its own tail
    
    
};

Snake.prototype.setDirection = function(newDirection) {
    // Set the current direction
    this.direction = newDirection;
};

var Food = function(x, y) {
    this.x = x;
    this.y = y;
    this.bitmojiNumber = 1;
};
//Sets Aaron equal to the food
Food.prototype.draw = function() {
    //var randomBitmoji = round(random(0.5,2.4));
    if(score % 2 === 0)
    {
    drawAaronBitmoji({	
    x:this.x,
    y:this.y,
    h:35,
    shirtColor:color(255, 0, 0),
    initials:true
    });
    }
    else
    {
        drawBitmoji(this.x, this.y, 30);
    }
};

/*Food.prototype.toggle = function()
{
    if(this.bitmojiNumber === 1)
    {
        this.bitmojiNumber = 2;
    }
    else if (this.bitmojiNumber === 2) 
    {
        this.bitmojiNumber = 1;
    }
};*/
//Places a new food at a random location, after it is eaten
var foods = [];
for (var i = 0; i < numFood; i++) {  
    foods.push(new Food(round(random(10, 370)), round(random(5, 370))));
}

Snake.prototype.checkForFoodGrab = function(food) {
    var distance = dist(this.x, this.y, food.x, food.y);
    var combinedRadius = 10 + 25; //Combined Radius of both Snake and Food (Snake = 20/2 = 10) (Food = 50/2 = 25)
    if (distance < combinedRadius) {
        food.y = -400; // Moves the food off the bottom of the canvas
        score++;
        index++;
        if (score >= numFood) {
            gameOver = true; //Ends the game after 100 food is grabbed
        }
        // Set the position of the food object to a random location
        food.x = round(random(0, 400));
        food.y = round(random(0, 400));
        this.ateFood = true;// Set ateFood flag for Snake growth
    }
};
//Draws the snake
var playerSnake = new Snake(100, 100);
//The game screen
var gameScreen = function ()
{
    background(255, 0, 0);
};
//The end screen
var endScreen = function()
{
    background(255, 60, 255);
    textSize(40);
    fill(3, 3, 3);
    text("GAME OVER!!!", 67,150);
    textSize(20);
    text("Your Score: " + score, 121,192);
};
//Part of the Button Class 
mouseClicked = function()
{
    startButton.handleMouseClick();
};

draw = function() {
    //Displays the Splash Screen
    if (currentScene === 0)
    {
        splashScreen();
    }
    //Displays the End Screen 
    else if (currentScene === 2)
    {
        endScreen();
    }
    //Displays the game screen
    else if (currentScene === 1)
    {
    gameScreen();
    // static
    background(245, 12, 78);
    fill(0, 255, 26);
    text("Score:" + score, 40, 40);

    //Place new food if the game is not over
    if (!gameOver) {
        playerSnake.move();
        playerSnake.draw();
        // Draw the current food object
        foods[index].draw();
    }

    // Check for food grab
    playerSnake.checkForFoodGrab(foods[index]);
    }
};
//Checks for which key is pressed, and then moves the snake accordingly 
keyPressed = function() {
    if (keyCode === DOWN) {
        playerSnake.setDirection("down");
    } else if (keyCode === RIGHT) {
        playerSnake.setDirection("right");
    } else if (keyCode === LEFT) {
        playerSnake.setDirection("left");
    } else if (keyCode === UP) {
        playerSnake.setDirection("up");
    }
};
